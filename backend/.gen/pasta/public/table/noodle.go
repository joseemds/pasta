//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Noodle = newNoodleTable("public", "noodle", "")

type noodleTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Content   postgres.ColumnString
	Filename  postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz
	PastaID   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type NoodleTable struct {
	noodleTable

	EXCLUDED noodleTable
}

// AS creates new NoodleTable with assigned alias
func (a NoodleTable) AS(alias string) *NoodleTable {
	return newNoodleTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NoodleTable with assigned schema name
func (a NoodleTable) FromSchema(schemaName string) *NoodleTable {
	return newNoodleTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NoodleTable with assigned table prefix
func (a NoodleTable) WithPrefix(prefix string) *NoodleTable {
	return newNoodleTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NoodleTable with assigned table suffix
func (a NoodleTable) WithSuffix(suffix string) *NoodleTable {
	return newNoodleTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNoodleTable(schemaName, tableName, alias string) *NoodleTable {
	return &NoodleTable{
		noodleTable: newNoodleTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newNoodleTableImpl("", "excluded", ""),
	}
}

func newNoodleTableImpl(schemaName, tableName, alias string) noodleTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		ContentColumn   = postgres.StringColumn("content")
		FilenameColumn  = postgres.StringColumn("filename")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		PastaIDColumn   = postgres.IntegerColumn("pasta_id")
		allColumns      = postgres.ColumnList{IDColumn, ContentColumn, FilenameColumn, CreatedAtColumn, UpdatedAtColumn, PastaIDColumn}
		mutableColumns  = postgres.ColumnList{ContentColumn, FilenameColumn, CreatedAtColumn, UpdatedAtColumn, PastaIDColumn}
	)

	return noodleTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Content:   ContentColumn,
		Filename:  FilenameColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		PastaID:   PastaIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
