//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Pasta = newPastaTable("public", "pasta", "")

type pastaTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	Title       postgres.ColumnString
	Description postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz
	AccountID   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PastaTable struct {
	pastaTable

	EXCLUDED pastaTable
}

// AS creates new PastaTable with assigned alias
func (a PastaTable) AS(alias string) *PastaTable {
	return newPastaTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PastaTable with assigned schema name
func (a PastaTable) FromSchema(schemaName string) *PastaTable {
	return newPastaTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PastaTable with assigned table prefix
func (a PastaTable) WithPrefix(prefix string) *PastaTable {
	return newPastaTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PastaTable with assigned table suffix
func (a PastaTable) WithSuffix(suffix string) *PastaTable {
	return newPastaTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPastaTable(schemaName, tableName, alias string) *PastaTable {
	return &PastaTable{
		pastaTable: newPastaTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newPastaTableImpl("", "excluded", ""),
	}
}

func newPastaTableImpl(schemaName, tableName, alias string) pastaTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		TitleColumn       = postgres.StringColumn("title")
		DescriptionColumn = postgres.StringColumn("description")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		AccountIDColumn   = postgres.IntegerColumn("account_id")
		allColumns        = postgres.ColumnList{IDColumn, TitleColumn, DescriptionColumn, CreatedAtColumn, UpdatedAtColumn, AccountIDColumn}
		mutableColumns    = postgres.ColumnList{TitleColumn, DescriptionColumn, CreatedAtColumn, UpdatedAtColumn, AccountIDColumn}
	)

	return pastaTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Title:       TitleColumn,
		Description: DescriptionColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		AccountID:   AccountIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
