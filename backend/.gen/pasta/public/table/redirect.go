//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Redirect = newRedirectTable("public", "redirect", "")

type redirectTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	URL       postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz
	PastaID   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RedirectTable struct {
	redirectTable

	EXCLUDED redirectTable
}

// AS creates new RedirectTable with assigned alias
func (a RedirectTable) AS(alias string) *RedirectTable {
	return newRedirectTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RedirectTable with assigned schema name
func (a RedirectTable) FromSchema(schemaName string) *RedirectTable {
	return newRedirectTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RedirectTable with assigned table prefix
func (a RedirectTable) WithPrefix(prefix string) *RedirectTable {
	return newRedirectTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RedirectTable with assigned table suffix
func (a RedirectTable) WithSuffix(suffix string) *RedirectTable {
	return newRedirectTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRedirectTable(schemaName, tableName, alias string) *RedirectTable {
	return &RedirectTable{
		redirectTable: newRedirectTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newRedirectTableImpl("", "excluded", ""),
	}
}

func newRedirectTableImpl(schemaName, tableName, alias string) redirectTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		URLColumn       = postgres.StringColumn("url")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		PastaIDColumn   = postgres.IntegerColumn("pasta_id")
		allColumns      = postgres.ColumnList{IDColumn, URLColumn, CreatedAtColumn, UpdatedAtColumn, PastaIDColumn}
		mutableColumns  = postgres.ColumnList{URLColumn, CreatedAtColumn, UpdatedAtColumn, PastaIDColumn}
	)

	return redirectTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		URL:       URLColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		PastaID:   PastaIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
